{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let version = "2.0.0"

let keyVersion = "version"
let keyActive = "active"
let keyAssetIdA = "A_asset_id"
let keyAssetIdB = "B_asset_id"
let keyBalanceA = "A_asset_balance"
let keyBalanceB = "B_asset_balance"
let keyShareAssetId = "share_asset_id"
let keyShareAssetSupply = "share_asset_supply"
let keyCommission = "commission"
let keyCommissionScaleDelimiter = "commission_scale_delimiter"
let keyCommissionGovernance = "commission_governance"
let keyInvariant = "invariant"
let keyCause = "shutdown_cause"

let adminPubKey1 = base58'${adminPubKey1}'
let adminPubKey2 = base58'${adminPubKey2}'
let adminPubKey3 = base58'${adminPubKey3}'
let adminPubKeyStartStop = base58'${adminPubKeyStartStop}'
let adminPubKeyStaking = base58'${adminPubKeyStaking}'

let governanceAddress = Address(base58'${governanceAddress}')
let stakingAddress = Address(base58'${stakingAddress}')

let USDN = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let stakingFeeInUSDN = 9 * assetInfo(USDN).value().minSponsoredFee.value() # sponsored fee for invoke called from scripted account

let isActive = this.getBooleanValue(keyActive)

let strAssetIdA = this.getStringValue(keyAssetIdA)
let strAssetIdB = this.getStringValue(keyAssetIdB)
let assetIdA = if strAssetIdA == "WAVES" then unit else strAssetIdA.fromBase58String()
let assetIdB = if strAssetIdB == "WAVES" then unit else strAssetIdB.fromBase58String()
let assetNameA = match assetIdA {
    case id: ByteVector => assetInfo(id).value().name
    case waves: Unit => "WAVES"
}
let assetNameB = match assetIdB {
    case id: ByteVector => assetInfo(id).value().name
    case waves: Unit => "WAVES"
}
let balanceA = this.getIntegerValue(keyBalanceA)
let balanceB = this.getIntegerValue(keyBalanceB)
let shareAssetId = this.getStringValue(keyShareAssetId).fromBase58String()
let shareAssetSupply = this.getIntegerValue(keyShareAssetSupply)
let invariant = this.getIntegerValue(keyInvariant)

let commission = 500 # commission/commissionScaleDelimiter = 0.0005
let commissionGovernance = 200 # commissionGovernance/commissionScaleDelimiter = 0.0002. 3/5 fee back to the dApp, 2/5 sends to the governance address
let commissionScaleDelimiter = 1000000

let scaleValue3 = 1000
let scaleValue8 = 100000000
let scaleValue12 = 1000000000000
let slippageToleranceDelimiter = 1000
let scaleValue8Digits = 8
let scaleValue12Digits = 12

let dAppThreshold = 50 # dAppThresholdAmount/dAppThresholdAmountDelimiter = 0.5
let dAppThresholdDelimiter = 100

let ratioThresholdMax = 100000000
let ratioThresholdMin = 99999000

let alpha = 50 # model coefficient alpha = 0.15 with 2 digits
let alphaDigits = 2
let beta = 46000000 # model coefficient beta = 0.46 with 8 digits
let betaDigits = 8

func accountBalance(assetId: ByteVector|Unit) = match assetId {
    case id: ByteVector => this.assetBalance(id)
    case waves: Unit => this.wavesBalance().available
}

let stakedAmountUSDN = match stakingAddress.getInteger("rpd_balance_" + USDN.toBase58String() + "_" + this.toString()) {
    case staked: Int => staked
    case nothing: Unit => 0
}

let availableBalanceA = balanceA - if assetIdA == USDN then stakedAmountUSDN else 0
let availableBalanceB = balanceB - if assetIdB == USDN then stakedAmountUSDN else 0
let accountBalanceWithStakedA = accountBalance(assetIdA) + if assetIdA == USDN then stakedAmountUSDN else 0
let accountBalanceWithStakedB = accountBalance(assetIdB) + if assetIdB == USDN then stakedAmountUSDN else 0

let hasEnoughBalance = accountBalanceWithStakedA >= balanceA && accountBalanceWithStakedB >= balanceB

# skewness = 0.5*(x/y+y/x)
# Each fraction multiple by scaleValue in order to avoid zeroing
# During working on this fraction scaleValue8 was switched to scaleValue12. To unscale back to 8 digits added /10000
func skewness(x: Int, y: Int) = (scaleValue12.fraction(x, y) + scaleValue12.fraction(y, x)) / 2 / 10000

# Calculate (x+y)*skewness^(-alpha) + 2*(x*y)^0.5*(skewness-beta)^alpha
func invariantCalc(x: Int, y: Int) = {
    let sk = skewness(x, y)
    fraction(
        x + y,
        scaleValue8,
        pow(sk, scaleValue8Digits, alpha, alphaDigits, scaleValue8Digits, UP)
    ) + 2 * fraction(
        pow(fraction(x, y, scaleValue8), 0, 5, 1, scaleValue8Digits / 2, DOWN),
        pow(sk - beta, scaleValue8Digits, alpha, alphaDigits, scaleValue8Digits, DOWN),
        scaleValue8
    )
}

func calculateHowManySendToken(amountToSendEstimated: Int, minTokenReceiveAmount: Int, tokenReceiveAmount: Int, tokenId: ByteVector|Unit) = {
    let slippageValue = scaleValue8 - scaleValue8 * 1 / 10000000 # 0.000001% of slippage
    let deltaBetweenMaxAndMinSendValue = amountToSendEstimated - minTokenReceiveAmount

    let amountToSendStep1 = amountToSendEstimated - 1 * deltaBetweenMaxAndMinSendValue / 5
    let amountToSendStep2 = amountToSendEstimated - 2 * deltaBetweenMaxAndMinSendValue / 5
    let amountToSendStep3 = amountToSendEstimated - 3 * deltaBetweenMaxAndMinSendValue / 5
    let amountToSendStep4 = amountToSendEstimated - 4 * deltaBetweenMaxAndMinSendValue / 5
    let amountToSendStep5 = amountToSendEstimated - 5 * deltaBetweenMaxAndMinSendValue / 5

    let x = balanceA + tokenReceiveAmount
    let y = balanceB + tokenReceiveAmount

    let invariantNew =
        if tokenId == assetIdA then
            invariantCalc(x, balanceB - amountToSendEstimated)
        else invariantCalc(balanceA - amountToSendEstimated, y)
    let invariantDiffs =
        if tokenId == assetIdA then [
            invariantCalc(x, balanceB - amountToSendStep1) - invariant,
            invariantCalc(x, balanceB - amountToSendStep2) - invariant,
            invariantCalc(x, balanceB - amountToSendStep3) - invariant,
            invariantCalc(x, balanceB - amountToSendStep4) - invariant,
            invariantCalc(x, balanceB - amountToSendStep5) - invariant
        ] else [
            invariantCalc(balanceA - amountToSendStep1, y) - invariant,
            invariantCalc(balanceA - amountToSendStep2, y) - invariant,
            invariantCalc(balanceA - amountToSendStep3, y) - invariant,
            invariantCalc(balanceA - amountToSendStep4, y) - invariant,
            invariantCalc(balanceA - amountToSendStep5, y) - invariant
        ]

    let invariantEstimatedRatio = fraction(invariant, scaleValue8, invariantNew)

    # before start check last condition. If it wrong we can stop
    if invariantDiffs[4] <= 0 then
        throw("minTokenReceiveAmount too large.err1")
    else if invariantEstimatedRatio > slippageValue && invariantNew - invariant > 0 then
        amountToSendEstimated
    else if invariantDiffs[0] > 0 then
        amountToSendStep1 * (commissionScaleDelimiter - commission) / commissionScaleDelimiter
    else if invariantDiffs[1] > 0 then
        amountToSendStep2 * (commissionScaleDelimiter - commission) / commissionScaleDelimiter
    else if invariantDiffs[2] > 0 then
        amountToSendStep3 * (commissionScaleDelimiter - commission) / commissionScaleDelimiter
    else if invariantDiffs[3] > 0 then
        amountToSendStep4 * (commissionScaleDelimiter - commission) / commissionScaleDelimiter
    else if invariantDiffs[4] > 0 then
        amountToSendStep5 * (commissionScaleDelimiter - commission) / commissionScaleDelimiter
    else
        throw("something went wrong while working with amountToSendStep. err2")
}

func getAssetInfo(assetId: ByteVector|Unit) = match assetId {
    case id: ByteVector =>
        let stringId = id.toBase58String()
        let info = assetInfo(id).valueOrErrorMessage("Asset " + stringId + " doesn't exist")
        (stringId, info.name, info.decimals)
    case waves: Unit => ("WAVES", "WAVES", 8)
}

func suspend(cause: String) = [
    BooleanEntry(keyActive, false),
    StringEntry(keyCause, cause)
]

func deductStakingFee(amount: Int, assetId: ByteVector|Unit) = amount - if assetId == USDN then stakingFeeInUSDN else 0

func throwIsActive() = throw("DApp is already active")
func throwIsInactive() = throw("DApp is inactive at this moment")
func throwOnlyAdmin() = throw("Only admin can call this function")
func throwAssets() = throw("Incorrect assets attached. Expected: " + strAssetIdA + " and " + strAssetIdB)
func throwThreshold(threshold: Int, amountA: Int, amountB: Int) = throw("New balance in assets of the DApp is less than threshold " + threshold.toString()
    + ": " + amountA.toString() + " " + assetNameA + ", " + amountB.toString() + " " + assetNameB)
func throwInsufficientAvailableBalance(amount: Int, available: Int, assetName: String) = throw("Insufficient DApp balance to pay "
    + amount.toString() + " " + assetName + " due to staking. Available: "
    + available.toString() + " " + assetName +  ". Please contact support in Telegram: https://t.me/swopfisupport")
func throwInsufficientAvailableBalances(amountA: Int, amountB: Int) = throw("Insufficient DApp balance to pay "
    + amountA.toString() + " " + assetNameA + " and "  + amountB.toString() + " " + assetNameB
    + " due to staking. Available: "
    + availableBalanceA.toString() + " " + assetNameA + " and "  + availableBalanceB.toString() + " " + assetNameB
    +  ". Please contact support in Telegram: https://t.me/swopfisupport")
func suspendSuspicious() = suspend("Suspicious state. Actual balances: " + balanceA.toString() + " " + assetNameA + ", " + balanceB.toString() + " " + assetNameB
        + ". State: " + accountBalance(assetIdA).toString() + " " + assetNameA + ", " + accountBalance(assetIdB).toString() + " " + assetNameB)

@Callable(i)
func init() = {
    let (pmtAmountA, pmtAssetIdA) = (i.payments[0].amount, i.payments[0].assetId)
    let (pmtAmountB, pmtAssetIdB) = (i.payments[1].amount, i.payments[1].assetId)
    let (pmtStrAssetIdA, pmtAssetNameA, pmtDecimalsA) = getAssetInfo(pmtAssetIdA)
    let (pmtStrAssetIdB, pmtAssetNameB, pmtDecimalsB) = getAssetInfo(pmtAssetIdB)

    if this.getBoolean(keyActive).isDefined() then
        throwIsActive()
    else if pmtAssetIdA == pmtAssetIdB then
        throw("Assets must be different")
    else {
        let shareName = "s" + pmtAssetNameA.take(7) + "_" + pmtAssetNameB.take(7)
        let shareDescription = "ShareToken of SwopFi protocol for " + pmtAssetNameA + " and " + pmtAssetNameB + " at address " + this.toString()

        # we save 16 digit info with using scaleValue8Digits in pow functions. We divide /scaleValue8 to delete 8 digits and another 8 digits we define as digits in shareToken in Issue tx
        let shareDecimals = (pmtDecimalsA + pmtDecimalsB) / 2
        let shareInitialSupply = fraction(
            pow(pmtAmountA, pmtDecimalsA, 5, 1, pmtDecimalsA, HALFDOWN),
            pow(pmtAmountB, pmtDecimalsB, 5, 1, pmtDecimalsB, HALFDOWN),
            pow(10, 0, shareDecimals, 0, 0, HALFDOWN)
        )
        let shareIssue = Issue(shareName, shareDescription, shareInitialSupply, shareDecimals, true)
        let shareIssueId = shareIssue.calculateAssetId()

        let invariantCalculated = invariantCalc(pmtAmountA, pmtAmountB)
        [
            StringEntry(keyVersion, version),
            BooleanEntry(keyActive, true),
            StringEntry(keyAssetIdA, pmtStrAssetIdA),
            StringEntry(keyAssetIdB, pmtStrAssetIdB),
            IntegerEntry(keyBalanceA, pmtAmountA),
            IntegerEntry(keyBalanceB, pmtAmountB),
            IntegerEntry(keyInvariant, invariantCalculated),
            IntegerEntry(keyCommission, commission),
            IntegerEntry(keyCommissionScaleDelimiter, commissionScaleDelimiter),
            shareIssue,
            StringEntry(keyShareAssetId, shareIssueId.toBase58String()),
            IntegerEntry(keyShareAssetSupply, shareInitialSupply),
            ScriptTransfer(i.caller, shareInitialSupply, shareIssueId)
        ]
    }
}

# if someone ready to replenish in both tokens. It's necessary to bring tokens amount in proportion according to dApp state
@Callable(i)
func replenishWithTwoTokens(slippageTolerance: Int) = {
    let pmtAssetIdA = i.payments[0].assetId
    let pmtAssetIdB = i.payments[1].assetId
    # block for accounting the cost of commissions for staking operations
    let pmtAmountA = deductStakingFee(i.payments[0].amount, pmtAssetIdA)
    let pmtAmountB = deductStakingFee(i.payments[1].amount, pmtAssetIdB)

    # fraction should be equal 1(multiple by 1000) if depositor replenish with proportion according to actual price
    let tokenRatio = fraction(balanceA, scaleValue8, pmtAmountA)
                    .fraction(scaleValue3, balanceB.fraction(scaleValue8, pmtAmountB))

    let ratioShareTokensInA = fraction(pmtAmountA, scaleValue8, balanceA)
    let ratioShareTokensInB = fraction(pmtAmountB, scaleValue8, balanceB)
    let shareTokenToPayAmount = min([ratioShareTokensInA, ratioShareTokensInB]).fraction(shareAssetSupply, scaleValue8)

    let invariantCalculated = invariantCalc(balanceA + pmtAmountA, balanceB + pmtAmountB)

    if !isActive then
        throwIsInactive()
    else if slippageTolerance < 0 || slippageTolerance > slippageToleranceDelimiter then
        throw("Slippage tolerance must be between 0 and " + slippageToleranceDelimiter.toString() + " inclusively. Actual: " + slippageTolerance.toString())
    else if i.payments.size() != 2 then
        throw("Two attached assets expected")
    else if pmtAssetIdA != assetIdA || pmtAssetIdB != assetIdB then
        throwAssets()
    else if tokenRatio < (scaleValue3 * (slippageToleranceDelimiter - slippageTolerance)) / slippageToleranceDelimiter
            || tokenRatio > (scaleValue3 * (slippageToleranceDelimiter + slippageTolerance)) / slippageToleranceDelimiter then
        throw("Incorrect assets amount: amounts must have the contract ratio")
    else if shareTokenToPayAmount == 0 then
        throw("Too small amount to replenish")
    else if !hasEnoughBalance then
        suspendSuspicious()
    else [
        IntegerEntry(keyBalanceA, balanceA + pmtAmountA),
        IntegerEntry(keyBalanceB, balanceB + pmtAmountB),
        IntegerEntry(keyShareAssetSupply, shareAssetSupply + shareTokenToPayAmount),
        IntegerEntry(keyInvariant, invariantCalculated),
        Reissue(shareAssetId, shareTokenToPayAmount, true),
        ScriptTransfer(i.caller, shareTokenToPayAmount, shareAssetId)
    ]
}

# if someone ready to replenish in one token
@Callable(i)
func replenishWithOneToken(virtualSwapTokenPay: Int, virtualSwapTokenGet: Int) = {
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)

    let pmtMinThreshold = 5000000
    let thresholdValueForMinTolerance = 50000000
    let tolerance = if pmtAmount < thresholdValueForMinTolerance then 100000 else 1

    let slippageValueMinForReplenish = scaleValue8 - scaleValue8 * tolerance / 10000000 # if pmtAmount > 50.000000 then slippage = 0.000001%
    let slippageValueMaxForReplenish = scaleValue8 + scaleValue8 * tolerance / 10000000

    let slippageValueMinForSwap = scaleValue8 - scaleValue8 * 1 / 10000000
    let slippageValueMaxForSwap = scaleValue8 + scaleValue8 * 1 / 10000000

    if !isActive then
        throwIsInactive()
    else if pmtAmount < pmtMinThreshold then
        throw("Payment amount " + pmtAmount.toString() + " does not exceed the minimum amount of " + pmtMinThreshold.toString() + " tokens")
    else if i.payments.size() != 1 then
        throw("One attached payment expected")
    else if !hasEnoughBalance then
        suspendSuspicious()
    else if pmtAssetId != assetIdA && pmtAssetId != assetIdB then
        throwAssets()
    else {
        let (virtualReplenishA, virtualReplenishB,
            balanceAfterVirtualSwapA, balanceAfterVirtualSwapB,
            invariantCalculated,
            newAmountTokenA, newAmountTokenB) =
            if pmtAssetId == assetIdA then (
                virtualSwapTokenGet, pmtAmount - virtualSwapTokenPay,
                balanceA + virtualSwapTokenPay, balanceB - virtualSwapTokenGet,
                invariantCalc(balanceA + pmtAmount, balanceB),
                balanceA + pmtAmount, balanceB
            ) else (
                pmtAmount - virtualSwapTokenPay, virtualSwapTokenGet,
                balanceA - virtualSwapTokenGet, balanceB + virtualSwapTokenPay,
                invariantCalc(balanceA, balanceB + pmtAmount),
                balanceA, balanceB + pmtAmount
            )
        let newBalanceEntry =
            if pmtAssetId == assetIdA then
                IntegerEntry(keyBalanceA, newAmountTokenA)
            else IntegerEntry(keyBalanceB, newAmountTokenB)

        let invariantNew = invariantCalc(balanceAfterVirtualSwapA, balanceAfterVirtualSwapB)
        let invariantEstimatedRatio = fraction(invariant, scaleValue8, invariantNew)

        let ratioVirtualBalanceToVirtualReplenish = fraction(balanceAfterVirtualSwapA, scaleValue8 * scaleValue8, balanceAfterVirtualSwapB)
                                                    / fraction(virtualReplenishA, scaleValue8, virtualReplenishB)

        let dAppThresholdAmount = fraction(newAmountTokenA + newAmountTokenB, dAppThreshold, 2 * dAppThresholdDelimiter)

        if invariantEstimatedRatio > slippageValueMinForSwap && invariantNew - invariant <= 0 then
            throw("incorrect virtualSwapTokenPay or virtualSwapTokenGet value")
        else if ratioVirtualBalanceToVirtualReplenish < slippageValueMinForReplenish || ratioVirtualBalanceToVirtualReplenish > slippageValueMaxForReplenish then
            throw("swop with virtualSwapTokenPay and virtualSwapTokenGet possible, but ratio after virtual swap incorrect")
        else if newAmountTokenA < dAppThresholdAmount || newAmountTokenB < dAppThresholdAmount then
            throwThreshold(dAppThresholdAmount, newAmountTokenA, newAmountTokenB)
        else {
            # fee for staking operation
            let ratioShareTokensInA = virtualReplenishA.deductStakingFee(assetIdA).fraction(scaleValue8, balanceAfterVirtualSwapA)
            let ratioShareTokensInB = virtualReplenishB.deductStakingFee(assetIdB).fraction(scaleValue8, balanceAfterVirtualSwapB)

            let shareTokenToPayAmount = min([ratioShareTokensInA, ratioShareTokensInB]).fraction(shareAssetSupply, scaleValue8)

            [
                Reissue(shareAssetId, shareTokenToPayAmount, true),
                ScriptTransfer(i.caller, shareTokenToPayAmount, shareAssetId),
                IntegerEntry(keyShareAssetSupply, shareAssetSupply + shareTokenToPayAmount),
                newBalanceEntry,
                IntegerEntry(keyInvariant, invariantCalculated)
            ]
        }
    }
}

@Callable(i)
func withdraw() = {
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)

    # block for accounting the cost of commissions for staking operations
    let amountToPayA = pmtAmount.fraction(balanceA, shareAssetSupply).deductStakingFee(assetIdA)
    let amountToPayB = pmtAmount.fraction(balanceB, shareAssetSupply).deductStakingFee(assetIdB)

    let invariantCalculated = invariantCalc(balanceA - amountToPayA, balanceB - amountToPayB)

    if !isActive then
        throwIsInactive()
    else if i.payments.size() != 1 then
        throw("One attached payment expected")
    else if pmtAssetId != shareAssetId then
        throw("Incorrect asset attached. Expected: " + shareAssetId.toBase58String())
    else if !hasEnoughBalance then
        suspendSuspicious()
    else if amountToPayA > availableBalanceA || amountToPayB > availableBalanceB then
        throwInsufficientAvailableBalances(amountToPayA, amountToPayB)
    else [
        IntegerEntry(keyBalanceA, balanceA - amountToPayA),
        IntegerEntry(keyBalanceB, balanceB - amountToPayB),
        IntegerEntry(keyShareAssetSupply, shareAssetSupply - pmtAmount),
        IntegerEntry(keyInvariant, invariantCalculated),
        Burn(shareAssetId, pmtAmount),
        ScriptTransfer(i.caller, amountToPayA, assetIdA),
        ScriptTransfer(i.caller, amountToPayB, assetIdB)
    ]
}

@Callable(i)
func exchange(estimatedAmountToReceive: Int, minAmountToReceive: Int) = {
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)

    if !isActive then
        throwIsInactive()
    else if estimatedAmountToReceive <= 0 then
        throw("Estimated amount must be positive. Actual: " + estimatedAmountToReceive.toString())
    else if minAmountToReceive > estimatedAmountToReceive then
        throw("Minimal amount can't be greater than estimated. Estimated: " + estimatedAmountToReceive.toString() + ". Minimal: " + minAmountToReceive.toString())
    else if i.payments.size() != 1 then
        throw("One attached payment expected")
    else if !hasEnoughBalance then
        suspendSuspicious()
    else if pmtAssetId != assetIdA && pmtAssetId != assetIdB then
        throwAssets()
    else {
        let amountWithoutFee = calculateHowManySendToken(estimatedAmountToReceive, minAmountToReceive, pmtAmount, pmtAssetId)
        let amountWithFee = fraction(amountWithoutFee, commissionScaleDelimiter - commission, commissionScaleDelimiter)
        let governanceReward = fraction(amountWithoutFee, commissionGovernance, commissionScaleDelimiter)

        let (newAmountTokenA, newAmountTokenB) =
            if pmtAssetId == assetIdA then
                (balanceA + pmtAmount, balanceB - amountWithFee - governanceReward)
            else (balanceA - amountWithFee - governanceReward, balanceB + pmtAmount)
        let dAppThresholdAmount = fraction(newAmountTokenA + newAmountTokenB, dAppThreshold, 2 * dAppThresholdDelimiter)

        if newAmountTokenA < dAppThresholdAmount || newAmountTokenB < dAppThresholdAmount then
            throwThreshold(dAppThresholdAmount, newAmountTokenA, newAmountTokenB)
        else if newAmountTokenA < availableBalanceA && pmtAssetId == assetIdA then
            throwInsufficientAvailableBalance(amountWithFee, availableBalanceB, assetNameB)
        else if newAmountTokenB < availableBalanceB && pmtAssetId == assetIdB then
            throwInsufficientAvailableBalance(amountWithFee, availableBalanceA, assetNameA)
        else
            # successful execution result is updating information about actual balance and supply into the state and transfer tokens to the caller
            [
                IntegerEntry(keyBalanceA, newAmountTokenA),
                IntegerEntry(keyBalanceB, newAmountTokenB),
                IntegerEntry(keyInvariant, invariantCalc(newAmountTokenA, newAmountTokenB)),
                ScriptTransfer(i.caller, amountWithFee, pmtAssetId),
                ScriptTransfer(governanceAddress, governanceReward, pmtAssetId)
            ]
    }
}

@Callable(i)
func shutdown() =
    if !isActive then
        throw("DApp is already suspended. Cause: " + this.getString(keyCause).valueOrElse("the cause wasn't specified"))
    else if ![adminPubKey1, adminPubKey2, adminPubKey3, adminPubKeyStartStop].containsElement(i.callerPublicKey) then
        throwOnlyAdmin()
    else
        suspend("Paused by admin")

@Callable(i)
func activate() =
    if isActive then
        throwIsActive()
    else if ![adminPubKey1, adminPubKey2, adminPubKey3, adminPubKeyStartStop].containsElement(i.callerPublicKey) then
        throwOnlyAdmin()
    else [
        BooleanEntry(keyActive, true),
        DeleteEntry(keyCause)
    ]


@Callable(i)
func takeIntoAccountExtraFunds(amountLeave: Int) = {
    let uncountableAmountEnrollAssetA = accountBalanceWithStakedA - balanceA
    let uncountableAmountEnrollAssetB = accountBalanceWithStakedB - balanceB
    let amountEnrollA = uncountableAmountEnrollAssetA - if assetIdA == USDN then amountLeave else 0
    let amountEnrollB = uncountableAmountEnrollAssetB - if assetIdB == USDN then amountLeave else 0

    if !isActive then
            throwIsInactive()
    else if ![adminPubKey1, adminPubKey2, adminPubKey3, adminPubKeyStaking].containsElement(i.callerPublicKey) then
        throwOnlyAdmin()
    else if amountLeave < 0 then
        throw("Argument 'amountLeave' cannot be negative. Actual: " + amountLeave.toString())
    else if uncountableAmountEnrollAssetA < 0 || uncountableAmountEnrollAssetB < 0 then
        suspend("Enroll amount negative")
    else if amountEnrollA < 0 || amountEnrollB < 0 then
        throw("Too large amountLeave")
    else
        [
            IntegerEntry(keyBalanceA, balanceA + amountEnrollA),
            IntegerEntry(keyBalanceB, balanceB + amountEnrollB)
        ]
}

@Verifier(tx)
func verify() = match tx {
    case invoke: InvokeScriptTransaction =>
        sigVerify(invoke.bodyBytes, invoke.proofs[0], adminPubKeyStaking) && invoke.dApp == stakingAddress
    case _ => {
        let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
        let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
        let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
        adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
    }
}
